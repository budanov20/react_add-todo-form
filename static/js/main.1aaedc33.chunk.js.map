{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","classNames","completed","title","TodoList","newTodos","map","getUser","userId","usersFromServer","find","todos","App","useState","setTitle","isTitleError","setIsTitleError","setUserId","isUserError","setIsUserError","setNewTodos","onSubmit","event","preventDefault","trim","length","prevState","newTodo","Math","max","type","placeholder","value","onChange","target","Number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1aaedc33.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a\n    className=\"UserInfo\"\n    href={`mailto:${user.email}`}\n  >\n    {user.name}\n  </a>\n);\n","import classNames from 'classnames';\n\nimport { UserInfo } from '../UserInfo/UserInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': todo.completed === true },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n\n      {todo.user && (\n        <UserInfo user={todo.user} />\n      )}\n\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ntype Props = {\n  newTodos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ newTodos }) => (\n  <section className=\"TodoList\">\n    {newTodos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n\n  </section>\n);\n","import { useState, FormEvent } from 'react';\nimport './App.scss';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList/TodoList';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nconst todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [isTitleError, setIsTitleError] = useState(false);\n  const [userId, setUserId] = useState(0);\n  const [isUserError, setIsUserError] = useState(false);\n  const [newTodos, setNewTodos] = useState<Todo[]>(todos);\n  const submit = (event: FormEvent) => {\n    event.preventDefault();\n\n    if (title.trim().length === 0) {\n      setIsTitleError(true);\n    }\n\n    if (userId === 0) {\n      setIsUserError(true);\n    }\n\n    if (title.length > 0 && userId > 0) {\n      setNewTodos((prevState) => {\n        const largestIdInTodos\n          = Math.max(...prevState.map(todo => todo.id));\n        const newTodo = {\n          completed: false,\n          id: largestIdInTodos + 1,\n          title,\n          user: getUser(userId),\n          userId,\n        };\n\n        return [...prevState, newTodo];\n      });\n\n      setTitle('');\n      setUserId(0);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n      <form onSubmit={submit}>\n        <div className=\"field\">\n          <label>\n            Title:\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              id=\"title\"\n              placeholder=\"Type the title of the todos\"\n              value={title}\n              onChange={(event) => {\n                setTitle(event.target.value.trim());\n\n                if (isTitleError) {\n                  setIsTitleError(false);\n                }\n              }}\n            />\n\n            {isTitleError\n              && <span className=\"error\">Please enter a title</span>}\n          </label>\n        </div>\n\n        <div className=\"field\">\n          <label>\n            Choose a user:\n            <select\n              data-cy=\"userSelect\"\n              id=\"title\"\n              value={userId}\n              onChange={(event) => {\n                setUserId(Number(event.target.value));\n\n                if (isUserError) {\n                  setIsUserError(false);\n                }\n              }}\n            >\n              <option value=\"\">\n                Choose a user\n              </option>\n\n              {usersFromServer.map(({ name, id }) => (\n                <option value={id} key={id}>\n                  {name}\n                </option>\n              ))}\n            </select>\n\n            {isUserError\n              && <span className=\"error\">Please choose a user</span>}\n          </label>\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n\n      <section className=\"TodoList\">\n        <TodoList newTodos={newTodos} />\n      </section>\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}